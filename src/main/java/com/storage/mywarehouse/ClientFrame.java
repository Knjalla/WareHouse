/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.storage.mywarehouse;

import com.storage.mywarehouse.Entity.Customer;
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.management.ImmutableDescriptor;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.apache.commons.lang3.tuple.ImmutableTriple;

/**
 *
 * @author Patroklos
 */
public final class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClientFrame
     */
    
    private final mainframe frame;
    
    private DefaultTableModel tbmodel;
    
    private final MyObservable observable = new MyObservable();
    private List customers;
    
    public ClientFrame(mainframe frame, final List<ImmutableTriple> customers) {
        
        observable.addObserver(frame);
        
        this.customers = customers;
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                Globals.ClientsFrame = false;
            }
        });
        
        this.frame = frame;
        initComponents();
        
        
        tbmodel = new DefaultTableModel(new Object[]{"Last Name","First Name","Occupation","Discount"},0);
        jTable1.setModel(tbmodel);
        
        jTable1.getDefaultEditor(String.class).addCellEditorListener(
                new CellEditorListener() {
                    public void editingCanceled(ChangeEvent e) {
                        System.out.println("editingCanceled");
                    }

                    public void editingStopped(ChangeEvent e) {
                        System.out.println("editingStopped: apply additional action");
                        
                        save();
                        observable.changeData("refresh_clients");
                    }
                });
        
        refreshClients(customers);
        setVisible(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        
    }
    
    public void save(){
        //decompose to triples
        customers = new ArrayList<>();
        String fname="";
        String job="";
        double dc = 0.0;
        ImmutableTriple<String, String, Double> tpl;
        for(int i=0;i<tbmodel.getRowCount();i++){
            fname = tbmodel.getValueAt(i, 0)+ " " + tbmodel.getValueAt(i, 1);
            job = "" + tbmodel.getValueAt(i, 2);
            dc = Double.parseDouble(tbmodel.getValueAt(i, 3).toString());
            tpl = new ImmutableTriple<>(fname,job, dc);
            customers.add(tpl);
        }
        
        ObjectOutputStream oos = null;
        try {
            oos = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream("df_csr.bdf")));
            oos.writeObject(customers);
            oos.close();
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                oos.close();
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
            
    }
    
    
    
    public void refreshClients(List customers){
        this.customers = customers;
        int rows = tbmodel.getRowCount();
        
        Collections.sort(customers, new ComparatorImpl());
        
        //empty client table
        for(int i=0;i<rows;i++)
            tbmodel.removeRow(0);
        for (Iterator it = customers.iterator(); it.hasNext();) {
            Customer customer = (Customer) it.next();
            String fname = customer.getName();
            tbmodel.addRow(new Object[]{customer.getLastName(),customer.getName(),customer.getOccupation(),customer.getDiscount()});
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        newClient = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        newClient.setText("New Customer");
        newClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newClientActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Last Name", "First Name", "Occupation", "Discount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(newClient)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(newClient)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newClientActionPerformed
        clientForm clf = new clientForm(frame);
        clf.setVisible(true);
        clf.setAlwaysOnTop(true);
        clf.requestFocusInWindow();
    }//GEN-LAST:event_newClientActionPerformed

  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton newClient;
    // End of variables declaration//GEN-END:variables

    private static class ComparatorImpl implements Comparator<Customer> {

        public ComparatorImpl() {
        }

        @Override
        public int compare(Customer o1, Customer o2) {
            
            // descending order (ascending order would be:
            // o1.getGrade()-o2.getGrade())
            return (o1.getLastName() + " " +  o1.getLastName() ).compareTo(o2.getLastName() + " " +  o2.getLastName());
        }
    }
}
